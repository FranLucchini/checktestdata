// Generated by Bisonc++ V4.01.00 on Thu, 26 Feb 2015 00:13:54 +0000

#define BISONCPP_VERSION 40100LL

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {293, 1}, // 1: start ->  commands
     {293, 2}, // 2: start (PARSE_ASSIGNLIST) ->  PARSE_ASSIGNLIST assignlist
     {294, 0}, // 3: commands ->  <empty>
     {294, 2}, // 4: commands ->  commands command
     {296, 1}, // 5: command (CMD_SPACE) ->  CMD_SPACE
     {296, 1}, // 6: command (CMD_NEWLINE) ->  CMD_NEWLINE
     {296, 1}, // 7: command (CMD_EOF) ->  CMD_EOF
     {296, 1}, // 8: command (CMD_END) ->  CMD_END
     {296, 1}, // 9: command (CMD_ELSE) ->  CMD_ELSE
     {296, 6}, // 10: command (CMD_INT) ->  CMD_INT '(' expr ',' expr ')'
     {296, 8}, // 11: command (CMD_INT) ->  CMD_INT '(' expr ',' expr ',' variable ')'
     {296, 6}, // 12: command (CMD_FLOAT) ->  CMD_FLOAT '(' expr ',' expr ')'
     {296, 8}, // 13: command (CMD_FLOAT) ->  CMD_FLOAT '(' expr ',' expr ',' variable ')'
     {296, 10}, // 14: command (CMD_FLOAT) ->  CMD_FLOAT '(' expr ',' expr ',' variable ',' opt_float ')'
     {296, 4}, // 15: command (CMD_STRING) ->  CMD_STRING '(' value ')'
     {296, 4}, // 16: command (CMD_REGEX) ->  CMD_REGEX '(' value ')'
     {296, 6}, // 17: command (CMD_REGEX) ->  CMD_REGEX '(' value ',' variable ')'
     {296, 4}, // 18: command (CMD_ASSERT) ->  CMD_ASSERT '(' test ')'
     {296, 4}, // 19: command (CMD_SET) ->  CMD_SET '(' assignlist ')'
     {296, 4}, // 20: command (CMD_UNSET) ->  CMD_UNSET '(' varlist ')'
     {296, 4}, // 21: command (CMD_REP) ->  CMD_REP '(' expr ')'
     {296, 6}, // 22: command (CMD_REP) ->  CMD_REP '(' expr ',' command ')'
     {296, 4}, // 23: command (CMD_WHILE) ->  CMD_WHILE '(' test ')'
     {296, 6}, // 24: command (CMD_WHILE) ->  CMD_WHILE '(' test ',' command ')'
     {296, 4}, // 25: command (CMD_IF) ->  CMD_IF '(' test ')'
     {296, 6}, // 26: command (CMD_REPI) ->  CMD_REPI '(' variable ',' expr ')'
     {296, 8}, // 27: command (CMD_REPI) ->  CMD_REPI '(' variable ',' expr ',' command ')'
     {296, 6}, // 28: command (CMD_WHILEI) ->  CMD_WHILEI '(' variable ',' test ')'
     {296, 8}, // 29: command (CMD_WHILEI) ->  CMD_WHILEI '(' variable ',' test ',' command ')'
     {299, 1}, // 30: opt_float (OPT_FIXED) ->  OPT_FIXED
     {299, 1}, // 31: opt_float (OPT_SCIENTIFIC) ->  OPT_SCIENTIFIC
     {303, 1}, // 32: string (STRING) ->  STRING
     {300, 1}, // 33: value (INTEGER) ->  INTEGER
     {300, 1}, // 34: value (FLOAT) ->  FLOAT
     {300, 1}, // 35: value ->  string
     {300, 1}, // 36: value ->  variable
     {298, 1}, // 37: variable (VARNAME) ->  VARNAME
     {298, 4}, // 38: variable (VARNAME) ->  VARNAME '[' exprlist ']'
     {304, 1}, // 39: exprlist ->  expr
     {304, 3}, // 40: exprlist (',') ->  exprlist ',' expr
     {302, 1}, // 41: varlist (VARNAME) ->  VARNAME
     {302, 3}, // 42: varlist (',') ->  varlist ',' VARNAME
     {305, 3}, // 43: varassign ('=') ->  variable '=' expr
     {295, 1}, // 44: assignlist ->  varassign
     {295, 3}, // 45: assignlist (',') ->  assignlist ',' varassign
     {306, 1}, // 46: compare (CMP_LT) ->  CMP_LT
     {306, 1}, // 47: compare (CMP_GT) ->  CMP_GT
     {306, 1}, // 48: compare (CMP_LE) ->  CMP_LE
     {306, 1}, // 49: compare (CMP_GE) ->  CMP_GE
     {306, 1}, // 50: compare (CMP_EQ) ->  CMP_EQ
     {306, 1}, // 51: compare (CMP_NE) ->  CMP_NE
     {297, 1}, // 52: expr ->  term
     {297, 3}, // 53: expr ('+') ->  expr '+' term
     {297, 3}, // 54: expr ('-') ->  expr '-' term
     {307, 1}, // 55: term ->  fact
     {307, 3}, // 56: term ('*') ->  term '*' fact
     {307, 3}, // 57: term ('/') ->  term '/' fact
     {307, 3}, // 58: term ('%') ->  term '%' fact
     {308, 1}, // 59: fact ->  value
     {308, 2}, // 60: fact ('-') ->  '-' fact
     {308, 3}, // 61: fact ('(') ->  '(' expr ')'
     {308, 3}, // 62: fact ('^') ->  fact '^' fact
     {301, 2}, // 63: test ('!') ->  '!' test
     {301, 3}, // 64: test ('(') ->  '(' test ')'
     {301, 3}, // 65: test (LOGIC_AND) ->  test LOGIC_AND test
     {301, 3}, // 66: test (LOGIC_OR) ->  test LOGIC_OR test
     {301, 3}, // 67: test ->  expr compare expr
     {301, 1}, // 68: test (TEST_EOF) ->  TEST_EOF
     {301, 4}, // 69: test (TEST_MATCH) ->  TEST_MATCH '(' value ')'
     {301, 4}, // 70: test (TEST_UNIQUE) ->  TEST_UNIQUE '(' varlist ')'
     {301, 6}, // 71: test (TEST_INARRAY) ->  TEST_INARRAY '(' expr ',' variable ')'
     {309, 1}, // 72: start_$ ->  start
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  4} },                    
    { {     293}, {  1} }, // start           
    { {     294}, {  2} }, // commands        
    { {     290}, {  3} }, // PARSE_ASSIGNLIST
    { {       0}, { -3} },                    
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, { 19} },               
    { {     296}, {  4} }, // command    
    { {     267}, {  5} }, // CMD_SPACE  
    { {     268}, {  6} }, // CMD_NEWLINE
    { {     269}, {  7} }, // CMD_EOF    
    { {     283}, {  8} }, // CMD_END    
    { {     282}, {  9} }, // CMD_ELSE   
    { {     270}, { 10} }, // CMD_INT    
    { {     271}, { 11} }, // CMD_FLOAT  
    { {     272}, { 12} }, // CMD_STRING 
    { {     273}, { 13} }, // CMD_REGEX  
    { {     274}, { 14} }, // CMD_ASSERT 
    { {     275}, { 15} }, // CMD_SET    
    { {     276}, { 16} }, // CMD_UNSET  
    { {     277}, { 17} }, // CMD_REP    
    { {     278}, { 18} }, // CMD_WHILE  
    { {     281}, { 19} }, // CMD_IF     
    { {     279}, { 20} }, // CMD_REPI   
    { {     280}, { 21} }, // CMD_WHILEI 
    { {       0}, { -1} },               
};

SR__ s_3[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       295}, { 22} }, // assignlist
    { {       305}, { 23} }, // varassign 
    { {       298}, { 24} }, // variable  
    { {       284}, { 25} }, // VARNAME   
    { {         0}, {  0} },              
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 26} }, // '('
    { {         0}, {  0} },       
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 27} }, // '('
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 28} }, // '('
    { {         0}, {  0} },       
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 29} }, // '('
    { {         0}, {  0} },       
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 30} }, // '('
    { {         0}, {  0} },       
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 31} }, // '('
    { {         0}, {  0} },       
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 32} }, // '('
    { {         0}, {  0} },       
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 33} }, // '('
    { {         0}, {  0} },       
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 34} }, // '('
    { {         0}, {  0} },       
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 35} }, // '('
    { {         0}, {  0} },       
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 36} }, // '('
    { {         0}, {  0} },       
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 37} }, // '('
    { {         0}, {  0} },       
};

SR__ s_22[] =
{
    { { REQ_DEF}, {  2} },       
    { {      44}, { 38} }, // ','
    { {       0}, { -2} },       
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 39} }, // '='
    { {         0}, {  0} },       
};

SR__ s_25[] =
{
    { { REQ_DEF}, {   2} },       
    { {      91}, {  40} }, // '['
    { {       0}, { -37} },       
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, { 13} },            
    { {       297}, { 41} }, // expr    
    { {       307}, { 42} }, // term    
    { {       308}, { 43} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, { 13} },            
    { {       297}, { 52} }, // expr    
    { {       307}, { 42} }, // term    
    { {       308}, { 43} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  8} },            
    { {       300}, { 53} }, // value   
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  8} },            
    { {       300}, { 54} }, // value   
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, { 19} },                
    { {       301}, { 55} }, // test        
    { {        33}, { 56} }, // '!'         
    { {        40}, { 57} }, // '('         
    { {       297}, { 58} }, // expr        
    { {       257}, { 59} }, // TEST_EOF    
    { {       258}, { 60} }, // TEST_MATCH  
    { {       259}, { 61} }, // TEST_UNIQUE 
    { {       260}, { 62} }, // TEST_INARRAY
    { {       307}, { 42} }, // term        
    { {       308}, { 43} }, // fact        
    { {       300}, { 44} }, // value       
    { {        45}, { 45} }, // '-'         
    { {       285}, { 47} }, // INTEGER     
    { {       286}, { 48} }, // FLOAT       
    { {       303}, { 49} }, // string      
    { {       298}, { 50} }, // variable    
    { {       287}, { 51} }, // STRING      
    { {       284}, { 25} }, // VARNAME     
    { {         0}, {  0} },                
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  5} },              
    { {       295}, { 63} }, // assignlist
    { {       305}, { 23} }, // varassign 
    { {       298}, { 24} }, // variable  
    { {       284}, { 25} }, // VARNAME   
    { {         0}, {  0} },              
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  3} },           
    { {       302}, { 64} }, // varlist
    { {       284}, { 65} }, // VARNAME
    { {         0}, {  0} },           
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, { 13} },            
    { {       297}, { 66} }, // expr    
    { {       307}, { 42} }, // term    
    { {       308}, { 43} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, { 19} },                
    { {       301}, { 67} }, // test        
    { {        33}, { 56} }, // '!'         
    { {        40}, { 57} }, // '('         
    { {       297}, { 58} }, // expr        
    { {       257}, { 59} }, // TEST_EOF    
    { {       258}, { 60} }, // TEST_MATCH  
    { {       259}, { 61} }, // TEST_UNIQUE 
    { {       260}, { 62} }, // TEST_INARRAY
    { {       307}, { 42} }, // term        
    { {       308}, { 43} }, // fact        
    { {       300}, { 44} }, // value       
    { {        45}, { 45} }, // '-'         
    { {       285}, { 47} }, // INTEGER     
    { {       286}, { 48} }, // FLOAT       
    { {       303}, { 49} }, // string      
    { {       298}, { 50} }, // variable    
    { {       287}, { 51} }, // STRING      
    { {       284}, { 25} }, // VARNAME     
    { {         0}, {  0} },                
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, { 19} },                
    { {       301}, { 68} }, // test        
    { {        33}, { 56} }, // '!'         
    { {        40}, { 57} }, // '('         
    { {       297}, { 58} }, // expr        
    { {       257}, { 59} }, // TEST_EOF    
    { {       258}, { 60} }, // TEST_MATCH  
    { {       259}, { 61} }, // TEST_UNIQUE 
    { {       260}, { 62} }, // TEST_INARRAY
    { {       307}, { 42} }, // term        
    { {       308}, { 43} }, // fact        
    { {       300}, { 44} }, // value       
    { {        45}, { 45} }, // '-'         
    { {       285}, { 47} }, // INTEGER     
    { {       286}, { 48} }, // FLOAT       
    { {       303}, { 49} }, // string      
    { {       298}, { 50} }, // variable    
    { {       287}, { 51} }, // STRING      
    { {       284}, { 25} }, // VARNAME     
    { {         0}, {  0} },                
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       298}, { 69} }, // variable
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  3} },            
    { {       298}, { 70} }, // variable
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {       305}, { 71} }, // varassign
    { {       298}, { 24} }, // variable 
    { {       284}, { 25} }, // VARNAME  
    { {         0}, {  0} },             
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 13} },            
    { {       297}, { 72} }, // expr    
    { {       307}, { 42} }, // term    
    { {       308}, { 43} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, { 14} },            
    { {       304}, { 73} }, // exprlist
    { {       297}, { 74} }, // expr    
    { {       307}, { 42} }, // term    
    { {       308}, { 43} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {        44}, { 75} }, // ','
    { {        43}, { 76} }, // '+'
    { {        45}, { 77} }, // '-'
    { {         0}, {  0} },       
};

SR__ s_42[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  78} }, // '*'
    { {      47}, {  79} }, // '/'
    { {      37}, {  80} }, // '%'
    { {       0}, { -52} },       
};

SR__ s_43[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  81} }, // '^'
    { {       0}, { -55} },       
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 11} },            
    { {       308}, { 82} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 13} },            
    { {       297}, { 83} }, // expr    
    { {       307}, { 42} }, // term    
    { {       308}, { 43} }, // fact    
    { {       300}, { 44} }, // value   
    { {        45}, { 45} }, // '-'     
    { {        40}, { 46} }, // '('     
    { {       285}, { 47} }, // INTEGER 
    { {       286}, { 48} }, // FLOAT   
    { {       303}, { 49} }, // string  
    { {       298}, { 50} }, // variable
    { {       287}, { 51} }, // STRING  
    { {       284}, { 25} }, // VARNAME 
    { {         0}, {  0} },            
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  4} },       
    { {        44}, { 84} }, // ','
    { {        43}, { 76} }, // '+'
    { {        45}, { 77} }, // '-'
    { {         0}, {  0} },       
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 85} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 86} }, // ')'
    { {        44}, { 87} }, // ','
    { {         0}, {  0} },       
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  4} },             
    { {        41}, { 88} }, // ')'      
    { {       291}, { 89} }, // LOGIC_AND
    { {       292}, { 90} }, // LOGIC_OR 
    { {         0}, {  0} },             
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 19} },                
    { {       301}, { 91} }, // test        
    { {        33}, { 56} }, // '!'         
    { {        40}, { 57} }, // '('         
    { {       297}, { 58} }, // expr        
    { {       257}, { 59} }, // TEST_EOF    
    { {       258}, { 60} }, // TEST_MATCH  
    { {       259}, { 61} }, // TEST_UNIQUE 
    { {       260}, { 62} }, // TEST_INARRAY
    { {       307}, { 42} }, // term        
    { {       308}, { 43} }, // fact        
    { {       300}, { 44} }, // value       
    { {        45}, { 45} }, // '-'         
    { {       285}, { 47} }, // INTEGER     
    { {       286}, { 48} }, // FLOAT       
    { {       303}, { 49} }, // string      
    { {       298}, { 50} }, // variable    
    { {       287}, { 51} }, // STRING      
    { {       284}, { 25} }, // VARNAME     
    { {         0}, {  0} },                
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, { 19} },                
    { {       301}, { 92} }, // test        
    { {       297}, { 93} }, // expr        
    { {        33}, { 56} }, // '!'         
    { {        40}, { 57} }, // '('         
    { {       257}, { 59} }, // TEST_EOF    
    { {       258}, { 60} }, // TEST_MATCH  
    { {       259}, { 61} }, // TEST_UNIQUE 
    { {       260}, { 62} }, // TEST_INARRAY
    { {       307}, { 42} }, // term        
    { {       308}, { 43} }, // fact        
    { {       300}, { 44} }, // value       
    { {        45}, { 45} }, // '-'         
    { {       285}, { 47} }, // INTEGER     
    { {       286}, { 48} }, // FLOAT       
    { {       303}, { 49} }, // string      
    { {       298}, { 50} }, // variable    
    { {       287}, { 51} }, // STRING      
    { {       284}, { 25} }, // VARNAME     
    { {         0}, {  0} },                
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {  10} },           
    { {       306}, {  94} }, // compare
    { {        43}, {  76} }, // '+'    
    { {        45}, {  77} }, // '-'    
    { {       261}, {  95} }, // CMP_LT 
    { {       262}, {  96} }, // CMP_GT 
    { {       263}, {  97} }, // CMP_LE 
    { {       264}, {  98} }, // CMP_GE 
    { {       265}, {  99} }, // CMP_EQ 
    { {       266}, { 100} }, // CMP_NE 
    { {         0}, {   0} },           
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 101} }, // '('
    { {         0}, {   0} },       
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 102} }, // '('
    { {         0}, {   0} },       
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        40}, { 103} }, // '('
    { {         0}, {   0} },       
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 104} }, // ')'
    { {        44}, {  38} }, // ','
    { {         0}, {   0} },       
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 105} }, // ')'
    { {        44}, { 106} }, // ','
    { {         0}, {   0} },       
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 107} }, // ')'
    { {        44}, { 108} }, // ','
    { {        43}, {  76} }, // '+'
    { {        45}, {  77} }, // '-'
    { {         0}, {   0} },       
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {   5} },             
    { {        41}, { 109} }, // ')'      
    { {        44}, { 110} }, // ','      
    { {       291}, {  89} }, // LOGIC_AND
    { {       292}, {  90} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {        41}, { 111} }, // ')'      
    { {       291}, {  89} }, // LOGIC_AND
    { {       292}, {  90} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        44}, { 112} }, // ','
    { {         0}, {   0} },       
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        44}, { 113} }, // ','
    { {         0}, {   0} },       
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  76} }, // '+'
    { {      45}, {  77} }, // '-'
    { {       0}, { -43} },       
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 114} }, // ']'
    { {        44}, { 115} }, // ','
    { {         0}, {   0} },       
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  76} }, // '+'
    { {      45}, {  77} }, // '-'
    { {       0}, { -39} },       
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       297}, { 116} }, // expr    
    { {       307}, {  42} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  12} },            
    { {       307}, { 117} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  12} },            
    { {       307}, { 118} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       308}, { 119} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       308}, { 120} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       308}, { 121} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  11} },            
    { {       308}, { 122} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  81} }, // '^'
    { {       0}, { -60} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        41}, { 123} }, // ')'
    { {        43}, {  76} }, // '+'
    { {        45}, {  77} }, // '-'
    { {         0}, {   0} },       
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       297}, { 124} }, // expr    
    { {       307}, {  42} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       298}, { 125} }, // variable
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       301}, { 126} }, // test        
    { {        33}, {  56} }, // '!'         
    { {        40}, {  57} }, // '('         
    { {       297}, {  58} }, // expr        
    { {       257}, {  59} }, // TEST_EOF    
    { {       258}, {  60} }, // TEST_MATCH  
    { {       259}, {  61} }, // TEST_UNIQUE 
    { {       260}, {  62} }, // TEST_INARRAY
    { {       307}, {  42} }, // term        
    { {       308}, {  43} }, // fact        
    { {       300}, {  44} }, // value       
    { {        45}, {  45} }, // '-'         
    { {       285}, {  47} }, // INTEGER     
    { {       286}, {  48} }, // FLOAT       
    { {       303}, {  49} }, // string      
    { {       298}, {  50} }, // variable    
    { {       287}, {  51} }, // STRING      
    { {       284}, {  25} }, // VARNAME     
    { {         0}, {   0} },                
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       301}, { 127} }, // test        
    { {        33}, {  56} }, // '!'         
    { {        40}, {  57} }, // '('         
    { {       297}, {  58} }, // expr        
    { {       257}, {  59} }, // TEST_EOF    
    { {       258}, {  60} }, // TEST_MATCH  
    { {       259}, {  61} }, // TEST_UNIQUE 
    { {       260}, {  62} }, // TEST_INARRAY
    { {       307}, {  42} }, // term        
    { {       308}, {  43} }, // fact        
    { {       300}, {  44} }, // value       
    { {        45}, {  45} }, // '-'         
    { {       285}, {  47} }, // INTEGER     
    { {       286}, {  48} }, // FLOAT       
    { {       303}, {  49} }, // string      
    { {       298}, {  50} }, // variable    
    { {       287}, {  51} }, // STRING      
    { {       284}, {  25} }, // VARNAME     
    { {         0}, {   0} },                
};

SR__ s_91[] =
{
    { { REQ_DEF}, {   3} },             
    { {     291}, {  89} }, // LOGIC_AND
    { {     292}, {  90} }, // LOGIC_OR 
    { {       0}, { -63} },             
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {        41}, { 128} }, // ')'      
    { {       291}, {  89} }, // LOGIC_AND
    { {       292}, {  90} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {  11} },           
    { {        41}, { 123} }, // ')'    
    { {       306}, {  94} }, // compare
    { {        43}, {  76} }, // '+'    
    { {        45}, {  77} }, // '-'    
    { {       261}, {  95} }, // CMP_LT 
    { {       262}, {  96} }, // CMP_GT 
    { {       263}, {  97} }, // CMP_LE 
    { {       264}, {  98} }, // CMP_GE 
    { {       265}, {  99} }, // CMP_EQ 
    { {       266}, { 100} }, // CMP_NE 
    { {         0}, {   0} },           
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       297}, { 129} }, // expr    
    { {       307}, {  42} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {   8} },            
    { {       300}, { 130} }, // value   
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {   3} },           
    { {       302}, { 131} }, // varlist
    { {       284}, {  65} }, // VARNAME
    { {         0}, {   0} },           
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       297}, { 132} }, // expr    
    { {       307}, {  42} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {   2} },           
    { {       284}, { 133} }, // VARNAME
    { {         0}, {   0} },           
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {  19} },               
    { {       296}, { 134} }, // command    
    { {       267}, {   5} }, // CMD_SPACE  
    { {       268}, {   6} }, // CMD_NEWLINE
    { {       269}, {   7} }, // CMD_EOF    
    { {       283}, {   8} }, // CMD_END    
    { {       282}, {   9} }, // CMD_ELSE   
    { {       270}, {  10} }, // CMD_INT    
    { {       271}, {  11} }, // CMD_FLOAT  
    { {       272}, {  12} }, // CMD_STRING 
    { {       273}, {  13} }, // CMD_REGEX  
    { {       274}, {  14} }, // CMD_ASSERT 
    { {       275}, {  15} }, // CMD_SET    
    { {       276}, {  16} }, // CMD_UNSET  
    { {       277}, {  17} }, // CMD_REP    
    { {       278}, {  18} }, // CMD_WHILE  
    { {       281}, {  19} }, // CMD_IF     
    { {       279}, {  20} }, // CMD_REPI   
    { {       280}, {  21} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {  19} },               
    { {       296}, { 135} }, // command    
    { {       267}, {   5} }, // CMD_SPACE  
    { {       268}, {   6} }, // CMD_NEWLINE
    { {       269}, {   7} }, // CMD_EOF    
    { {       283}, {   8} }, // CMD_END    
    { {       282}, {   9} }, // CMD_ELSE   
    { {       270}, {  10} }, // CMD_INT    
    { {       271}, {  11} }, // CMD_FLOAT  
    { {       272}, {  12} }, // CMD_STRING 
    { {       273}, {  13} }, // CMD_REGEX  
    { {       274}, {  14} }, // CMD_ASSERT 
    { {       275}, {  15} }, // CMD_SET    
    { {       276}, {  16} }, // CMD_UNSET  
    { {       277}, {  17} }, // CMD_REP    
    { {       278}, {  18} }, // CMD_WHILE  
    { {       281}, {  19} }, // CMD_IF     
    { {       279}, {  20} }, // CMD_REPI   
    { {       280}, {  21} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       297}, { 136} }, // expr    
    { {       307}, {  42} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       301}, { 137} }, // test        
    { {        33}, {  56} }, // '!'         
    { {        40}, {  57} }, // '('         
    { {       297}, {  58} }, // expr        
    { {       257}, {  59} }, // TEST_EOF    
    { {       258}, {  60} }, // TEST_MATCH  
    { {       259}, {  61} }, // TEST_UNIQUE 
    { {       260}, {  62} }, // TEST_INARRAY
    { {       307}, {  42} }, // term        
    { {       308}, {  43} }, // fact        
    { {       300}, {  44} }, // value       
    { {        45}, {  45} }, // '-'         
    { {       285}, {  47} }, // INTEGER     
    { {       286}, {  48} }, // FLOAT       
    { {       303}, {  49} }, // string      
    { {       298}, {  50} }, // variable    
    { {       287}, {  51} }, // STRING      
    { {       284}, {  25} }, // VARNAME     
    { {         0}, {   0} },                
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {  13} },            
    { {       297}, { 138} }, // expr    
    { {       307}, {  42} }, // term    
    { {       308}, {  43} }, // fact    
    { {       300}, {  44} }, // value   
    { {        45}, {  45} }, // '-'     
    { {        40}, {  46} }, // '('     
    { {       285}, {  47} }, // INTEGER 
    { {       286}, {  48} }, // FLOAT   
    { {       303}, {  49} }, // string  
    { {       298}, {  50} }, // variable
    { {       287}, {  51} }, // STRING  
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 139} }, // ')'
    { {        44}, { 140} }, // ','
    { {        43}, {  76} }, // '+'
    { {        45}, {  77} }, // '-'
    { {         0}, {   0} },       
};

SR__ s_117[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  78} }, // '*'
    { {      47}, {  79} }, // '/'
    { {      37}, {  80} }, // '%'
    { {       0}, { -53} },       
};

SR__ s_118[] =
{
    { { REQ_DEF}, {   4} },       
    { {      42}, {  78} }, // '*'
    { {      47}, {  79} }, // '/'
    { {      37}, {  80} }, // '%'
    { {       0}, { -54} },       
};

SR__ s_119[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  81} }, // '^'
    { {       0}, { -56} },       
};

SR__ s_120[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  81} }, // '^'
    { {       0}, { -57} },       
};

SR__ s_121[] =
{
    { { REQ_DEF}, {   2} },       
    { {      94}, {  81} }, // '^'
    { {       0}, { -58} },       
};

SR__ s_122[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 141} }, // ')'
    { {        44}, { 142} }, // ','
    { {        43}, {  76} }, // '+'
    { {        45}, {  77} }, // '-'
    { {         0}, {   0} },       
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 143} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_126[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_127[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_128[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_129[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  76} }, // '+'
    { {      45}, {  77} }, // '-'
    { {       0}, { -67} },       
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 144} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 145} }, // ')'
    { {        44}, { 106} }, // ','
    { {         0}, {   0} },       
};

SR__ s_132[] =
{
    { { REQ_TOKEN}, {   4} },       
    { {        44}, { 146} }, // ','
    { {        43}, {  76} }, // '+'
    { {        45}, {  77} }, // '-'
    { {         0}, {   0} },       
};

SR__ s_133[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 147} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_135[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 148} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   5} },       
    { {        41}, { 149} }, // ')'
    { {        44}, { 150} }, // ','
    { {        43}, {  76} }, // '+'
    { {        45}, {  77} }, // '-'
    { {         0}, {   0} },       
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {   5} },             
    { {        41}, { 151} }, // ')'      
    { {        44}, { 152} }, // ','      
    { {       291}, {  89} }, // LOGIC_AND
    { {       292}, {  90} }, // LOGIC_OR 
    { {         0}, {   0} },             
};

SR__ s_138[] =
{
    { { REQ_DEF}, {   3} },       
    { {      43}, {  76} }, // '+'
    { {      45}, {  77} }, // '-'
    { {       0}, { -40} },       
};

SR__ s_139[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       298}, { 153} }, // variable
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       298}, { 154} }, // variable
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_144[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_145[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_146[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       298}, { 155} }, // variable
    { {       284}, {  25} }, // VARNAME 
    { {         0}, {   0} },            
};

SR__ s_147[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_149[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_150[] =
{
    { { REQ_TOKEN}, {  19} },               
    { {       296}, { 156} }, // command    
    { {       267}, {   5} }, // CMD_SPACE  
    { {       268}, {   6} }, // CMD_NEWLINE
    { {       269}, {   7} }, // CMD_EOF    
    { {       283}, {   8} }, // CMD_END    
    { {       282}, {   9} }, // CMD_ELSE   
    { {       270}, {  10} }, // CMD_INT    
    { {       271}, {  11} }, // CMD_FLOAT  
    { {       272}, {  12} }, // CMD_STRING 
    { {       273}, {  13} }, // CMD_REGEX  
    { {       274}, {  14} }, // CMD_ASSERT 
    { {       275}, {  15} }, // CMD_SET    
    { {       276}, {  16} }, // CMD_UNSET  
    { {       277}, {  17} }, // CMD_REP    
    { {       278}, {  18} }, // CMD_WHILE  
    { {       281}, {  19} }, // CMD_IF     
    { {       279}, {  20} }, // CMD_REPI   
    { {       280}, {  21} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR__ s_151[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {  19} },               
    { {       296}, { 157} }, // command    
    { {       267}, {   5} }, // CMD_SPACE  
    { {       268}, {   6} }, // CMD_NEWLINE
    { {       269}, {   7} }, // CMD_EOF    
    { {       283}, {   8} }, // CMD_END    
    { {       282}, {   9} }, // CMD_ELSE   
    { {       270}, {  10} }, // CMD_INT    
    { {       271}, {  11} }, // CMD_FLOAT  
    { {       272}, {  12} }, // CMD_STRING 
    { {       273}, {  13} }, // CMD_REGEX  
    { {       274}, {  14} }, // CMD_ASSERT 
    { {       275}, {  15} }, // CMD_SET    
    { {       276}, {  16} }, // CMD_UNSET  
    { {       277}, {  17} }, // CMD_REP    
    { {       278}, {  18} }, // CMD_WHILE  
    { {       281}, {  19} }, // CMD_IF     
    { {       279}, {  20} }, // CMD_REPI   
    { {       280}, {  21} }, // CMD_WHILEI 
    { {         0}, {   0} },               
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 158} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 159} }, // ')'
    { {        44}, { 160} }, // ','
    { {         0}, {   0} },       
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 161} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_156[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 162} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_157[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 163} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_158[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_159[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {   4} },                  
    { {       299}, { 164} }, // opt_float     
    { {       288}, { 165} }, // OPT_FIXED     
    { {       289}, { 166} }, // OPT_SCIENTIFIC
    { {         0}, {   0} },                  
};

SR__ s_161[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_162[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_164[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 167} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_165[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_166[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_167[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
        // $insert LTYPEresize
        d_locationStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert LTYPEpush
    *(d_lsp__ = &d_locationStack__[d_stackIdx__]) = d_loc__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert LTYPEpop
    d_lsp__ = &d_locationStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 31 "checktestdata.y"
        { parseResult = d_vsp__[0]; }
        break;

        case 2:
#line 32 "checktestdata.y"
        { parseResult = d_vsp__[0]; }
        break;

        case 3:
#line 36 "checktestdata.y"
        { d_val__ = parse_t('l'); }
        break;

        case 4:
#line 37 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[-1],d_vsp__[0]); }
        break;

        case 10:
#line 46 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 11:
#line 47 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-7],d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 12:
#line 48 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 13:
#line 49 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-7],d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 14:
#line 51 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-9],d_vsp__[-7],d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 15:
#line 52 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 16:
#line 53 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 17:
#line 54 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 18:
#line 55 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 19:
#line 56 "checktestdata.y"
        { d_val__ = parse_t('@',d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 20:
#line 57 "checktestdata.y"
        { d_val__ = parse_t('@',d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 21:
#line 58 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 22:
#line 59 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 23:
#line 60 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 24:
#line 61 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 25:
#line 62 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 26:
#line 63 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 27:
#line 64 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-7],d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 28:
#line 65 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 29:
#line 66 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-7],d_vsp__[-5],d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 32:
#line 72 "checktestdata.y"
        { d_val__ = parse_t('s',d_vsp__[0]); }
        break;

        case 33:
#line 76 "checktestdata.y"
        { d_val__ = parse_t('i',d_vsp__[0]); }
        break;

        case 34:
#line 77 "checktestdata.y"
        { d_val__ = parse_t('f',d_vsp__[0]); }
        break;

        case 37:
#line 83 "checktestdata.y"
        { d_val__ = parse_t('v',d_vsp__[0]); }
        break;

        case 38:
#line 84 "checktestdata.y"
        { d_val__ = parse_t('v',d_vsp__[-3],d_vsp__[-1]); }
        break;

        case 39:
#line 88 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[0]); }
        break;

        case 40:
#line 89 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 41:
#line 93 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[0]); }
        break;

        case 42:
#line 94 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 43:
#line 98 "checktestdata.y"
        { d_val__ = parse_t('a',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 44:
#line 102 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[0]); }
        break;

        case 45:
#line 103 "checktestdata.y"
        { d_val__ = parse_t('l',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 52:
#line 109 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[0]); }
        break;

        case 53:
#line 110 "checktestdata.y"
        { d_val__ = parse_t('+',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 54:
#line 111 "checktestdata.y"
        { d_val__ = parse_t('-',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 55:
#line 115 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[0]); }
        break;

        case 56:
#line 116 "checktestdata.y"
        { d_val__ = parse_t('*',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 57:
#line 117 "checktestdata.y"
        { d_val__ = parse_t('/',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 58:
#line 118 "checktestdata.y"
        { d_val__ = parse_t('%',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 59:
#line 122 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[0]); }
        break;

        case 60:
#line 123 "checktestdata.y"
        { d_val__ = parse_t('n',d_vsp__[0]); }
        break;

        case 61:
#line 124 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-1]); }
        break;

        case 62:
#line 125 "checktestdata.y"
        { d_val__ = parse_t('^',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 63:
#line 129 "checktestdata.y"
        { d_val__ = parse_t('!',d_vsp__[0]); }
        break;

        case 64:
#line 130 "checktestdata.y"
        { d_val__ = parse_t(d_vsp__[-1]); }
        break;

        case 65:
#line 131 "checktestdata.y"
        { d_val__ = parse_t('&',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 66:
#line 132 "checktestdata.y"
        { d_val__ = parse_t('|',d_vsp__[-2],d_vsp__[0]); }
        break;

        case 67:
#line 133 "checktestdata.y"
        { d_val__ = parse_t('?',d_vsp__[-1],d_vsp__[-2],d_vsp__[0]); }
        break;

        case 68:
#line 134 "checktestdata.y"
        { d_val__ = parse_t('E'); }
        break;

        case 69:
#line 135 "checktestdata.y"
        { d_val__ = parse_t('M',d_vsp__[-1]); }
        break;

        case 70:
#line 136 "checktestdata.y"
        { d_val__ = parse_t('U',d_vsp__[-1]); }
        break;

        case 71:
#line 137 "checktestdata.y"
        { d_val__ = parse_t('A',d_vsp__[-3],d_vsp__[-1]); }
        break;

    }
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}




